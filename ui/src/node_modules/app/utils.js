import {pairs} from 'd3-array';
import {csvParse} from 'd3-dsv';
import {format} from 'd3-format';
import {interpolateWarm} from 'd3-scale-chromatic';
import {scaleQuantize} from 'd3-scale';
import * as _ from 'lamb';
import {
	arrayMax,
	arrayMin,
	inclusiveRange,
	makeArrayTransformer,
	makeWithKeys,
	transformValues,
} from '@svizzle/utils';

import {version} from '../../../package.json';
export {version} from '../../../package.json';

/* assets */

export const zipName = `beis_indicators_${version.replace(/\./ug, '_')}.zip`;
export const zipUrl = `/data/${zipName}`;

/* domain */

export const getNutsId = _.getKey('nuts_id');

export const getYearExtent = _.pipe([
	_.pluck('indicators'),
	_.flatten,
	_.pluck('year_range'),
	_.transpose,
	makeArrayTransformer([arrayMin, arrayMax]),
]); // IDEA just flatten and get the whole extent

export const makeIndicatorsLookup = _.pipe([
	_.pluck('indicators'),
	_.flatten,
	_.indexBy(_.getPath('schema.value.id')),
]);

export const makeValueAccessor = id => _.getKey(id);
export const sortAscByYear = _.sortWith([_.sorter(_.getKey('year'))]);

const sanitizeValue = _id => transformValues({
	[_id]: Number,
	// year: Number
});
export const parseCSV = id =>
	t => csvParse(t, sanitizeValue(id));

// color scale

const steps = inclusiveRange([0, 1, 0.25]);
const colorRange = _.map(steps, interpolateWarm);
const colorScale = scaleQuantize().range(colorRange);

export const makeColorScale = extent => colorScale.domain(extent);

export const makeColorBins = cScale => {
	const domain = cScale.domain();
	const ranges = pairs([domain[0], ...colorScale.thresholds(), domain[1]]);

	return _.map(_.zip(ranges, colorRange), makeWithKeys(['range', 'color']));
}

// format

export const getIndicatorFormat = (id, lookup) => _.pipe([
	_.getPath(`${id}.schema.value`),
	_.condition(
		_.hasKey('format'),
		value => format(value.format),
		() => _.identity,
	)
])(lookup);
